#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""polaris-gen is part of the PolarisTools package to create grids used by
POLARIS simulations from predefined models.

Examples:
    For usage information please execute:
        $ ./polaris-gen --help
"""

import os
import shutil
import numpy as np
from argparse import RawTextHelpFormatter, ArgumentParser

__author__ = "Robert Brauer"
__license__ = "GPL"
__version__ = "2.0.0"
__maintainer__ = "Robert Brauer"
__email__ = "robert.brauer@cea.fr"
__status__ = "Production"

'''
The ArgumentParser is used to obtain the non-optional and optional user input.

Notes:
    Default values of the ArgumentParser are set with None. Unless an option is set/chosen,
    the PolarisTools classes use their default values.
'''

parser = ArgumentParser(
    description='PolarisTools_gen, an user interface to create POLARIS grids:',
    formatter_class=RawTextHelpFormatter)

req_args = parser.add_argument_group('required arguments')
req_args.add_argument('model_name', metavar='model_name', type=str,
                      help='name of the POLARIS model.')
req_args.add_argument('grid_filename', metavar='grid_filename', type=str,
                      help='filename of the POLARIS grid.\n'
                           '    grid will be stored in: "/model_name/grid_filename"')

grid_args = parser.add_argument_group('grid')
grid_args.add_argument('--grid_type', dest='grid_type', type=str, choices=['octree', 'spherical', 'cylindrical'],
                       default=None, help='type of the POLARIS grid.')
grid_args.add_argument('--gas_mass', dest='gas_mass', type=str, default=None,
                       help='total gas mass of grid (overwrites model value).')
grid_args.add_argument('--inner_radius', dest='inner_radius', type=str, default=None,
                       help='inner radius of spherical or cylindrical grid (overwrites model value).')
grid_args.add_argument('--outer_radius', dest='outer_radius', type=str, default=None,
                       help='outer radius of spherical or cylindrical grid (overwrites model value).')
grid_args.add_argument('--z_max', dest='z_max', type=str, default=None,
                       help='maximum vertical extent of cylindrical grid (overwrites model value).')
grid_args.add_argument('--n_r', dest='n_r', type=int, default=None,
                       help='number of radial cells of spherical or cylindrical grid (overwrites model value).')
grid_args.add_argument('--n_ph', dest='n_ph', type=int, default=None,
                       help='number of azimuthal cells of spherical or cylindrical grid (overwrites model value).')
grid_args.add_argument('--n_th', dest='n_th', type=int, default=None,
                       help='number of theta cells of spherical grid (overwrites model value).')
grid_args.add_argument('--n_z', dest='n_z', type=int, default=None,
                       help='number of vertical cells of cylindrical grid (overwrites model value).')
grid_args.add_argument('--sf_r', dest='sf_r', type=float, default=None,
                       help='step width factor in radial direction of spherical or cylindrical grid '
                       '(overwrites model value).')
grid_args.add_argument('--sf_ph', dest='sf_ph', type=float, default=None,
                       help='step width factor in phi direction of spherical grid (overwrites model value).')
grid_args.add_argument('--sf_th', dest='sf_th', type=float, default=None,
                       help='step width factor in theta direction of spherical grid (overwrites model value).')
grid_args.add_argument('--sf_z', dest='sf_z', type=float, default=None,
                       help='step width factor in vertical direction of cylindrical grid (overwrites model value).')
grid_args.add_argument('--normalize', dest='normalize', type=int, default=1,
                       help='normalize gas mass and dust mass density distribution to total mass, which is defined in the model.\n'
                            '    default: 1 (1: enable / 0: disable).')
grid_args.add_argument('--num_dens', dest='num_dens', type=int, default=0,
                       help='interpret given gas and dust density distribution as number density, instead of mass density.\n'
                            '    if enabled, normalization (--normalize) will be disabled.\n'
                            '    default: 0 (1: enable / 0: disable).')
grid_args.add_argument('--extra', dest='extra_parameter', type=str, default=None, nargs='+',
                       help='additional parameter to vary model characteristics\n'
                            '    (multiple values possible, no unit strings!).')

parser_options = parser.parse_args()


class GridRoutines:
    """Manages the creation of POLARIS grids.
    """

    def __init__(self, parse_args):
        """Initialise all necessary modules which are required by grid.py

        Args:
            parse_args: Provides all parameters chosen
                by user when executing PolarisTools.
        """
        self.parse_args = parse_args

        # Get math module
        from polaris_tools_modules.math import Math
        self.math = Math()

        ''' #################################
        ######  Get required modules!  ######
        ################################# '''
        # Get model module
        from polaris_tools_modules.model import ModelChooser
        model_chooser = ModelChooser(parse_args)
        self.model = model_chooser.get_module()

        self.path = {}
        self.polaris_dir = '@POLARIS_PATH@'
        self.set_path_from_str(parse_args.model_name)

    def create_polaris_grid(self):
        """Create a grid based on a model (model.py) or external input (grid_extern.py)
        that can beused by POLARIS.
        """
        if self.parse_args.num_dens:
            self.parse_args.normalize = 0

        #: Init grid
        if self.model.parameter['grid_type'] == 'octree':
            from polaris_tools_modules.grid import OcTree
            grid = OcTree(self.model, self.path, self.parse_args)
        elif self.model.parameter['grid_type'] == 'spherical':
            from polaris_tools_modules.grid import Spherical
            grid = Spherical(self.model, self.path, self.parse_args)
        elif self.model.parameter['grid_type'] == 'cylindrical':
            from polaris_tools_modules.grid import Cylindrical
            grid = Cylindrical(self.model, self.path, self.parse_args)
        else:
            raise ValueError(
                f'Grid type {self.model.parameter["grid_type"]} not known!')
        #: Root node
        root = grid.init_root()
        #: Temporary tree file
        os.makedirs(os.path.dirname(
            self.path['model'] + 'tmp_' + self.parse_args.grid_filename), exist_ok=True)

        with open(self.path['model'] + 'tmp_' + self.parse_args.grid_filename, 'wb') as tmp_file:
            # Write header of the grid file
            grid.write_header(
                grid_file=tmp_file, grid_type=self.model.parameter['grid_type'], num_dens=self.parse_args.num_dens, root=root)
            # Create the grid
            grid.create_grid(tmp_file, root)

        if self.parse_args.normalize:
            print('--- Normalizing model mass!                                ')
            if isinstance(self.model.parameter['gas_mass'], float):
                #: Temporary tree file
                os.makedirs(os.path.dirname(
                    self.path['model'] + 'tmp_' + self.parse_args.grid_filename), exist_ok=True)
                with open(self.path['model'] + 'tmp_' + self.parse_args.grid_filename, 'rb') as tmp_file, \
                        open(self.path['model'] + self.parse_args.grid_filename, 'wb') as grid_file:
                    #: Final grid file
                    os.makedirs(os.path.dirname(
                        self.path['model'] + self.parse_args.grid_filename), exist_ok=True)
                    # Normalize the density of the grid and save it in the final file
                    grid.normalize_density(
                        tmp_file=tmp_file, grid_file=grid_file)

                # Remove the temporary grid file
                if "/" in self.parse_args.grid_filename:
                    shutil.rmtree(
                        self.path['model'] + 'tmp_' + self.parse_args.grid_filename.split('/')[0])
                else:
                    os.remove(self.path['model'] + 'tmp_' +
                              self.parse_args.grid_filename)

            elif np.shape(self.model.parameter['gas_mass']) == np.shape(grid.total_gas_mass):
                # Update the relation between the regions in the grid (gas)
                if self.model.parameter['gas_mass'] is not None:
                    tmp_gas_mass = np.subtract(
                        grid.total_gas_mass, self.model.tmp_parameter['ignored_gas_density'])
                    self.model.tmp_parameter['relative_gas_densities'] = np.divide(
                        self.model.parameter['gas_mass'], tmp_gas_mass,
                        out=np.zeros_like(self.model.parameter['gas_mass']),
                        where=tmp_gas_mass != 0)
                # Update the relation between the regions in the grid  (dust)
                if self.model.parameter['dust_mass'] is not None:
                    tmp_dust_mass = np.subtract(
                        grid.total_dust_mass, self.model.tmp_parameter['ignored_dust_density'])
                    self.model.tmp_parameter['relative_dust_densities'] = np.divide(
                        self.model.parameter['dust_mass'], tmp_dust_mass,
                        out=np.zeros_like(self.model.parameter['dust_mass']),
                        where=tmp_dust_mass != 0)
                #: Init grid
                if self.model.parameter['grid_type'] == 'octree':
                    grid = OcTree(self.model, self.path, self.parse_args)
                elif self.model.parameter['grid_type'] == 'spherical':
                    grid = Spherical(self.model, self.path, self.parse_args)
                elif self.model.parameter['grid_type'] == 'cylindrical':
                    grid = Cylindrical(self.model, self.path, self.parse_args)
                #: Root node
                root = grid.init_root()
                #: Final grid file
                os.makedirs(os.path.dirname(
                    self.path['model'] + self.parse_args.grid_filename), exist_ok=True)
                with open(self.path['model'] + self.parse_args.grid_filename, 'wb') as grid_file:
                    # Write header of the grid file
                    grid.write_header(
                        grid_file=grid_file, grid_type=self.model.parameter['grid_type'], root=root)
                    # Create the grid
                    grid.create_grid(grid_file, root)
                # Remove the temporary grid file
                if "/" in self.parse_args.grid_filename:
                    shutil.rmtree(self.path['model'] +
                                  'tmp_' + self.parse_args.grid_filename.split('/')[0])
                else:
                    os.remove(self.path['model'] +
                              'tmp_' + self.parse_args.grid_filename)

            else:
                raise ValueError(
                    f'The number of gas masses {len(self.model.parameter["gas_mass"])} '
                    f'does not fit with the numbers of densities {np.shape(grid.total_gas_mass)}')
        else:
            # Rename the temporary grid file
            os.rename(self.path['model'] + 'tmp_' + self.parse_args.grid_filename,
                      self.path['model'] + self.parse_args.grid_filename)
        # Plot additional information if set
        if self.model.parameter['gas_mass'] is not None and not isinstance(self.model.parameter['gas_mass'], float):
            for i in range(len(self.model.parameter['gas_mass'])):
                for j in range(len(self.model.parameter['gas_mass'][i])):
                    print(
                        f'--- Total gas mass of density distribution {i + 1} '
                        f'and region {j + 1}: {grid.total_gas_mass[i][j] / self.math.const["M_sun"]:.02e} M_sun')
        if self.model.parameter['dust_mass'] is not None and not isinstance(self.model.parameter['dust_mass'], float):
            for i in range(len(self.model.parameter['dust_mass'])):
                for j in range(len(self.model.parameter['dust_mass'][i])):
                    print(
                        f'--- Total dust mass of density distribution {i + 1} '
                        f'and region {j + 1}: {grid.total_dust_mass[i][j] / self.math.const["M_sun"]:.02e} M_sun')

    def set_path_from_str(self, model_name):
        """Sets all paths used by a given toolkit depending on input strings.

        Args:
            model_name (str): Name of the model (see model.py).
        """
        # Path to directory with the polaris package
        self.path['polaris'] = self.polaris_dir
        # Path to directory with the polaris and PolarisTools binaries
        self.path['bin'] = self.path['polaris'] + 'bin/'
        # Path to directory with input files besides the command file
        self.path['input'] = self.path['polaris'] + 'input/'
        # Path to directory with input files besides the command file
        self.path['dust'] = self.path['input'] + 'dust/'
        # Path to projects directory
        self.path['projects'] = self.path['polaris'] + 'projects/'
        # Path to directory with the PolarisTools source files and test cases
        self.path['tools'] = self.path['polaris'] + 'tools/'
        # Path to chosen model directory
        self.path['model'] = self.path['projects'] + str(model_name) + '/'
        # Create model directory, if it does not exist
        if not os.path.lexists(self.path['model']):
            os.mkdir(self.path['model'])


if __name__ == '__main__':
    print('------------------------- PolarisTools -------------------------')
    print('--- Initialization ...')
    grid_routines = GridRoutines(parser_options)
    print('--- Initialization finished!                                    ')
    print('--- Create a grid ...')
    grid_routines.create_polaris_grid()
    print('--- Creation of grid finished!                               ')
